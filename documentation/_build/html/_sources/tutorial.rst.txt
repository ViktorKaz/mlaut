Tutorial
========

The code below will help you get started with mleap.

The following Jupyter Notebook contains the code used below.

:download:`mleap.ipynb <../mleap.ipynb>`.


Data Preprocessing and Estimator Training Phase
-----------------------------------------------

**1. Get your data.**

The included code downloads preprocessed datasets from the UCI Machine Learning Repository and stores them locally.

:download:`delgado_datasets.py <../download_delgado/delgado_datasets.py>`

The enclosed code can be used as follows:  

.. literalinclude:: ../examples/basic.py
    :language: python
    :lines: 8-9

**2. Define Input and Output HDF5 objects.**

.. literalinclude:: ../examples/basic.py
    :language: python
    :lines: 13-14

**3. Store your data in HDF5 database.**

Once the datasets are stored locally we put them in an HDF5 database.

.. literalinclude:: ../examples/basic.py
    :language: python
    :lines: 17-20


**4. Split the data in test and train sets.**

.. literalinclude:: ../examples/basic.py
    :language: python
    :lines: 23-27


**5. Instantiate estimator objects and the experiments orchestrator class.**

.. literalinclude:: ../examples/basic.py
    :language: python
    :lines: 30-34

**6. Run the experiments.**

.. literalinclude:: ../examples/basic.py
    :language: python
    :lines: 37

At this point mleap will train all instantiated estimators on all datasets that were passed to the constructor. The trained models will be saved on the disk.

After this process is finished we can make predictions on the test sets using the trained estimators. in the previous step.

**7. Make predictions on the test sets.**

.. literalinclude:: ../examples/basic.py
    :language: python
    :lines: 40


Analyze Results of Machine Learning Experiments Phase
-----------------------------------------------------

After the training phase is completed the user can use the predictions on the test sets to run statistical tests.

The starting point is to calculate the prediction error achieved on the test sets. Two main methods are available for this purpose:

* :meth:`mleap.analyze_results.analyze_results.calculate_error_all_datasets`. This method calculates the error achieved by each estimator on each of the datasets and returns the results in a dictionary format. 
* :meth:`mleap.analyze_results.analyze_results.calculate_error_per_dataset`. This method calculates the prediction error for each estimator on each datapoint for each dataset.

.. literalinclude:: ../examples/basic.py
    :language: python
    :lines: 43-48

The output of these two functions can be used as an input to the flowing methods tests:

* :meth:`mleap.analyze_results.analyze_results.calculate_average_std`
* :meth:`mleap.analyze_results.analyze_results.cohens_d`
* :meth:`mleap.analyze_results.analyze_results.t_test`
* :meth:`mleap.analyze_results.analyze_results.sign_test`
* :meth:`mleap.analyze_results.analyze_results.t_test_with_bonferroni_correction`
* :meth:`mleap.analyze_results.analyze_results.wilcoxon_test`
* :meth:`mleap.analyze_results.analyze_results.friedman_test`
* :meth:`mleap.analyze_results.analyze_results.nemenyi`

Please refer to :ref:`analyze_results` for additional information about their use.

Defining estimators
-------------------

``mleap`` comes with a number of built-in estimators. However, the user also has the flexibility to define its own by inehriting from the :ref:`mleap_estimator-label' class. The user should at a minimum implement the ``save()`` and ``build()`` methods. Please refer to one of the implemented estimators (:ref:`estimators`) for additional information.